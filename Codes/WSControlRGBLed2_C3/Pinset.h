#define _Debug 1 // 定義除錯模式開關，1 表示開啟除錯功能，0 表示關閉除錯功能
#define TestLed 1 // 定義測試 LED 功能的開關，1 表示開啟 LED 測試，0 表示關閉 LED 測試
#include <String.h> // 引入 Arduino 的字串處理函數庫，用於操作和處理字串數據

#define WSPIN 10 // 定義 WS2812B LED 燈條的控制腳位，連接到 Arduino 的第 10 號引腳
#define NUMPIXELS 16 // 定義 WS2812B 燈條上的燈泡數量，這裡設定為 16 顆 LED
#define RXD2 20 // 定義第二組 UART（串口）的接收（RX）腳位，連接到第 20 號引腳
#define TXD2 21 // 定義第二組 UART（串口）的傳送（TX）腳位，連接到第 21 號引腳

#define CheckColorDelayTime 200 // 定義 LED 顏色檢查時的延遲時間，單位為毫秒（ms），這裡設為 200ms
#define initDelayTime 2000 // 定義程式初始化時的延遲時間，單位為毫秒（ms），這裡設為 2000ms（2秒）
#define CommandDelay 100 // 定義指令執行之間的延遲時間，單位為毫秒（ms），這裡設為 100ms

// 定義一個預設顏色陣列，用來儲存不同的 RGB 顏色值，每組包含三個數值 (R, G, B)，範圍為 0~255
int CheckColor[][3] = {
                          {255, 255, 255}, // 白色：紅 255、綠 255、藍 255
                          {255, 0, 0},     // 紅色：紅 255、綠 0、藍 0
                          {0, 255, 0},     // 綠色：紅 0、綠 255、藍 0
                          {0, 0, 255},     // 藍色：紅 0、綠 0、藍 255
                          {255, 128, 64},  // 橙色：紅 255、綠 128、藍 64
                          {255, 255, 0},   // 黃色：紅 255、綠 255、藍 0
                          {0, 255, 255},   // 青色：紅 0、綠 255、藍 255
                          {255, 0, 255},   // 紫色：紅 255、綠 0、藍 255
                          {255, 255, 255}, // 白色（重複）：紅 255、綠 255、藍 255
                          {255, 128, 0},   // 深橙色：紅 255、綠 128、藍 0
                          {255, 128, 128}, // 粉紅色：紅 255、綠 128、藍 128
                          {128, 255, 255}, // 淺藍綠色：紅 128、綠 255、藍 255
                          {128, 128, 192}, // 淡紫色：紅 128、綠 128、藍 192
                          {0, 128, 255},   // 天藍色：紅 0、綠 128、藍 255
                          {255, 0, 128},   // 粉紫色：紅 255、綠 0、藍 128
                          {128, 64, 64},   // 深紅色：紅 128、綠 64、藍 64
                          {0, 0, 0}        // 黑色（關閉）：紅 0、綠 0、藍 0
};

// 定義除錯訊息輸出函數（不換行），用於在除錯模式下顯示訊息
void DebugMsg(String msg) // 函數接收一個字串參數 msg，用來指定要顯示的訊息內容
{
    if (_Debug != 0)  // 檢查除錯模式是否開啟，若 _Debug 不為 0（即啟動除錯）
    {
        Serial.print(msg); // 通過串口輸出訊息內容（不換行），顯示 msg 變數中的文字
    }
}

// 定義除錯訊息輸出函數（換行），用於在除錯模式下顯示訊息並自動換行
void DebugMsgln(String msg) // 函數接收一個字串參數 msg，用來指定要顯示的訊息內容
{
    if (_Debug != 0)  // 檢查除錯模式是否開啟，若 _Debug 不為 0（即啟動除錯）
    {
        Serial.println(msg); // 通過串口輸出訊息內容（自動換行），顯示 msg 變數中的文字
    }
}
