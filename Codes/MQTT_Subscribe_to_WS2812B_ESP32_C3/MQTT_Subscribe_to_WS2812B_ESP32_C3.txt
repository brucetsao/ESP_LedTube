#include "initPins.h"     // 引入腳位與系統模組的標頭檔案，定義硬體腳位與相關設定
#include "WS2812BLib.h"   // 引入 WS2812B LED 燈條的自訂模組，處理燈光控制
#include "MQTTLIB.h"      // 引入 MQTT Broker 的自訂模組，負責 MQTT 通訊功能

// 宣告多個控制指示燈與腳位設定的函數原型
void WiFion();       // 宣告函數：控制板上的 WiFi 指示燈打開
void WiFioff();      // 宣告函數：控制板上的 WiFi 指示燈關閉
void ACCESSon();     // 宣告函數：控制板上的連線指示燈打開
void ACCESSoff();    // 宣告函數：控制板上的連線指示燈關閉
void SetPin();       // 宣告函數：設定主板 GPIO（通用輸入輸出）腳位的初始狀態

/* Arduino 的初始化函數，程式啟動時執行一次 */
void setup()
{
    initALL();       // 呼叫函數：執行系統硬體與軟體的初始化，包括串列通訊與 GPIO 設定
    delay(2000);     // 延遲 2 秒鐘，讓硬體有時間穩定，避免初始化時的錯誤
    initWiFi();      // 呼叫函數：初始化網路連線，連接到指定的 WiFi 熱點（如路由器）
    ShowInternet();  // 呼叫函數：顯示當前的網路連線資訊，例如 IP 地址，方便除錯
    initMQTT();      // 呼叫函數：初始化 MQTT Broker 連線設定，準備與伺服器通訊
    
    connectMQTT();   // 呼叫函數：連接到 MQTT 伺服器，建立通訊管道
    delay(1000);     // 延遲 1 秒鐘，確保連線過程完成，避免後續操作過快導致失敗
}

/* Arduino 的主迴圈函數，程式啟動後無限重複執行 */
void loop()
{
    if (!mqttclient.connected())  // 檢查 MQTT 客戶端是否與伺服器斷線
    {
        connectMQTT();            // 如果斷線，重新呼叫函數以重新連接到 MQTT 伺服器
    }

    mqttclient.loop();            // 執行 MQTT 客戶端的迴圈處理，保持連線並處理接收到的訊息
    // delay(loopdelay);          // （已註解）延遲指定的時間，用於控制主迴圈的執行頻率，避免過快
}

/* 函數：執行系統硬體與軟體的初始化 */
void initALL()
{
    Serial.begin(9600);           // 初始化串列通訊，設定波特率為 9600 bps，用於與電腦通訊
    Serial.println("System Start"); // 透過串列埠輸出訊息 "System Start"，表示系統已開始運行
    SetPin();                     // 呼叫函數：設定主板 GPIO 腳位的初始狀態，例如設定輸入或輸出模式
    if (TestLed == 1)             // 檢查 TestLed 變數是否為 1，若為 1 則進行 LED 測試
    {
        CheckLed();               // 呼叫函數：執行 LED 燈泡的顏色檢查，測試硬體是否正常
        DebugMsgln("Check LED");  // 呼叫函數：送出除錯訊息 "Check LED" 到串列埠，方便監控
        ChangeBulbColor(RedValue, GreenValue, BlueValue); // 呼叫函數：設定 LED 燈泡顏色，使用指定的 RGB 值
        DebugMsgln("Turn off LED"); // 呼叫函數：送出除錯訊息 "Turn off LED" 到串列埠，表示測試結束
    }
}

/* 函數：連接到 MQTT Broker，建立與伺服器的通訊 */
void connectMQTT()
{
    ACCESSon();                   // 呼叫函數：打開控制板上的連線指示燈，表示正在嘗試連線
    Serial.print("MQTT ClientID is :("); // 透過串列埠輸出 MQTT 客戶端 ID 的前綴，用於辨識設備
    Serial.print(clintid);        // 輸出實際的客戶端 ID（clintid 為程式中預設的變數）
    Serial.print(")\n");          // 輸出右括號與換行符號，完成 ID 的顯示格式

    // 使用 while 迴圈持續嘗試連接到 MQTT 伺服器，直到成功為止
    while (!mqttclient.connect(clintid, MQTTUser, MQTTPassword)) // 使用客戶端 ID、使用者名稱與密碼進行連線
    {
        Serial.print("-");        // 連線失敗時，每秒在串列埠輸出一個 "-"，表示正在重試
        delay(1000);              // 延遲 1 秒後再次嘗試連線，避免過快重試導致負載過高
    }
    Serial.print("\n");           // 連線成功後，輸出換行符號，區隔後續訊息
    ACCESSoff();                  // 呼叫函數：關閉控制板上的連線指示燈，表示連線已完成
    Serial.print("String Topic:["); // 輸出發佈主題名稱的前綴，顯示程式將發送訊息的主題
    Serial.print(PubTopicbuffer); // 輸出發佈主題的內容（PubTopicbuffer 為預設變數）
    Serial.print("]\n");          // 輸出右括號與換行符號，完成發佈主題的顯示

    Serial.print("char Topic:["); // 輸出訂閱主題名稱的前綴，顯示程式將接收訊息的主題
    Serial.print(SubTopicbuffer); // 輸出訂閱主題的內容（SubTopicbuffer 為預設變數）
    Serial.print("]\n");          // 輸出右括號與換行符號，完成訂閱主題的顯示

    mqttclient.subscribe(SubTopicbuffer); // 呼叫函數：訂閱指定的 MQTT 主題，以便接收相關訊息
    Serial.println("\n MQTT connected!"); // 透過串列埠輸出訊息，表示成功連接到 MQTT 伺服器
}

-----------------------------------------------
程式原理與解釋
整體架構
這段程式是基於 Arduino 平台的 C 語言程式，設計目的是控制一個搭載 WS2812B LED 燈條的設備，並透過 WiFi 連接到 MQTT Broker（訊息代理伺服器），實現遠端通訊與控制。程式主要分為三個部分：

初始化（setup()）：負責硬體與網路的初始化。
主迴圈（loop()）：持續檢查並維持 MQTT 連線。
自訂函數：包括系統初始化（initALL()）與 MQTT 連線（connectMQTT()）等功能。
程式詳細解釋
標頭檔案與函數宣告
#include "initPins.h"：引入腳位設定標頭檔案，定義硬體腳位（如 LED、指示燈）的 GPIO 對應關係。
#include "WS2812BLib.h"：引入 WS2812B LED 控制庫，用於設定與控制 LED 燈條的顏色。
#include "MQTTLIB.h"：引入 MQTT 通訊庫，負責與 MQTT 伺服器的連線與訊息處理。
函數宣告（如 WiFion()、SetPin()）：這些是控制硬體（如 WiFi 指示燈）或初始化腳位的功能，具體實現在其他檔案中。
setup() 函數
目的：程式啟動時執行一次，完成所有必要的初始化。
initALL()：初始化串列通訊（用於除錯）、GPIO 腳位，並可選擇測試 LED。
delay(2000)：延遲 2 秒，確保硬體穩定。
initWiFi()：連接到 WiFi 網路（具體實現在其他檔案）。
ShowInternet()：顯示網路資訊（如 IP 地址）。
initMQTT()：設定 MQTT 客戶端參數。
connectMQTT()：建立與 MQTT 伺服器的連線。
delay(1000)：延遲 1 秒，確保連線完成。
loop() 函數
目的：無限迴圈運行，保持程式持續運作。
if (!mqttclient.connected())：檢查 MQTT 是否斷線，若斷線則重新連線。
mqttclient.loop()：處理 MQTT 的訊息收發與連線維護。
delay(loopdelay)（已註解）：可用來控制迴圈頻率，避免過快執行。
initALL() 函數
Serial.begin(9600)：啟動串列通訊，波特率 9600，用於除錯訊息輸出。
SetPin()：設定 GPIO 腳位初始狀態（如輸入/輸出模式）。
LED 測試：若 TestLed == 1，則執行 LED 測試流程：
CheckLed()：檢查 LED 是否正常。
ChangeBulbColor()：設定 LED 為指定 RGB 顏色。
DebugMsgln()：輸出除錯訊息到串列埠。
connectMQTT() 函數
目的：建立與 MQTT 伺服器的連線並訂閱主題。
ACCESSon() / ACCESSoff()：控制連線指示燈，顯示連線狀態。
連線過程：
使用 mqttclient.connect() 嘗試連線，參數包括客戶端 ID（clintid）、使用者名稱（MQTTUser）、密碼（MQTTPassword）。
若失敗，進入 while 迴圈，每秒重試並輸出 "-"。
連線成功後：
顯示發佈主題（PubTopicbuffer）與訂閱主題（SubTopicbuffer）。
mqttclient.subscribe()：訂閱指定主題，準備接收訊息。
輸出 "MQTT connected!" 表示連線完成。
程式工作原理
硬體控制：程式透過 GPIO 控制 LED 燈條與指示燈，並使用串列通訊進行除錯。
網路通訊：透過 WiFi 模組連接到網路，再使用 MQTT 協議與遠端伺服器通訊。
MQTT 的作用：
發佈（Publish）：設備可將狀態（如 LED 顏色）發送到 PubTopicbuffer 主題。
訂閱（Subscribe）：設備從 SubTopicbuffer 主題接收指令（如改變 LED 顏色）。
容錯設計：主迴圈持續檢查 MQTT 連線狀態，若斷線則自動重連，確保穩定性。
應用場景
此程式可用於智慧家居系統，例如遠端控制 LED 燈條的顏色或亮度。透過 MQTT，設備可以與手機應用程式或雲端服務整合，實現即時控制與狀態回饋。

希望這樣的註解與解釋能幫助您更清楚理解程式的運作！若有其他問題，歡迎繼續提問。

